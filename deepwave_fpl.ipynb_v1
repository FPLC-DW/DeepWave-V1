{"cells":[{"cell_type":"markdown","metadata":{},"source":["# DeepWave FPL Predictor\n","This notebook fetches live Fantasy Premier League data, processes it, trains a machine learning model, and outputs predicted points."]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import requests\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_absolute_error\n","import json\n","\n","# Fetch live FPL data\n","url = 'https://fantasy.premierleague.com/api/bootstrap-static/'\n","response = requests.get(url)\n","data = response.json()\n","\n","# Convert players data to DataFrame\n","elements_df = pd.DataFrame(data['elements'])\n","\n","# Select relevant columns (removing XG/XA/XGI since they may be missing)\n","selected_columns = ['first_name', 'second_name', 'team', 'element_type',\n","                     'minutes', 'goals_scored', 'assists',\n","                     'clean_sheets', 'goals_conceded', 'own_goals',\n","                     'penalties_saved', 'penalties_missed',\n","                     'yellow_cards', 'red_cards',\n","                     'saves', 'bonus', 'bps',\n","                     'influence', 'creativity', 'threat',\n","                     'ict_index', 'total_points']\n","df = elements_df[selected_columns].copy()\n","\n","# Create full_name for reference\n","df['full_name'] = df['first_name'] + ' ' + df['second_name']\n","\n","# Features & Target\n","feature_cols = ['minutes', 'goals_scored', 'assists',\n","                'clean_sheets', 'goals_conceded', 'own_goals',\n","                'penalties_saved', 'penalties_missed',\n","                'yellow_cards', 'red_cards',\n","                'saves', 'bonus', 'bps',\n","                'influence', 'creativity', 'threat', 'ict_index']\n","\n","X = df[feature_cols]\n","y = df['total_points']\n","\n","# Train/test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Train model\n","model = RandomForestRegressor(n_estimators=200, random_state=42)\n","model.fit(X_train, y_train)\n","\n","# Predictions\n","y_pred = model.predict(X_test)\n","mae = mean_absolute_error(y_test, y_pred)\n","print(f\"Model MAE: {mae:.2f}\")\n","\n","# Predict for all players\n","df['predicted_points'] = model.predict(X)\n","\n","# Create predictions DataFrame for export\n","predictions_df = df[['full_name', 'team', 'element_type', 'predicted_points']].sort_values(by='predicted_points', ascending=False)\n","\n","# Export to CSV in Colab\n","predictions_df.to_csv('deepwave_predictions.csv', index=False)\n","from google.colab import files\n","files.download('deepwave_predictions.csv')"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11"}},"nbformat":4,"nbformat_minor":5}
